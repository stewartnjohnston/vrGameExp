/*
 * Copyright 2014 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.vr.sdk.samples.treasurehunt;

import android.content.Context;
import android.opengl.GLES20;
import android.opengl.Matrix;
import android.os.Bundle;
import android.os.Vibrator;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.InputDevice;
import android.view.WindowManager;

import com.google.vr.sdk.audio.GvrAudioEngine;
import com.google.vr.sdk.base.AndroidCompat;
import com.google.vr.sdk.base.Eye;
import com.google.vr.sdk.base.GvrActivity;
import com.google.vr.sdk.base.GvrView;
import com.google.vr.sdk.base.HeadTransform;
import com.google.vr.sdk.base.Viewport;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import javax.microedition.khronos.egl.EGLConfig;

import com.google.vr.sdk.samples.treasurehunt.common.RawResourceReader;

import com.google.vr.sdk.samples.treasurehunt.common.TextureHelper;
import com.google.vr.sdk.samples.treasurehunt.common.ShaderHelper;
import com.google.vr.sdk.samples.treasurehunt.common.Circuit;


/**
 * A Google VR sample application.
 *
 * <p>The TreasureHunt scene consists of a planar ground grid and a floating
 * "treasure" cube. When the user looks at the cube, the cube will turn gold.
 * While gold, the user can activate the Cardboard trigger, either directly
 * using the touch trigger on their Cardboard viewer, or using the Daydream
 * controller-based trigger emulation. Activating the trigger will in turn
 * randomly reposition the cube.
 */
public class TreasureHuntActivity extends GvrActivity implements GvrView.StereoRenderer {


  /** This is a handle to our texture data. */
  private int mTextureDataHandleR;
  private int mTextureDataHandleL;

  private static float xPosition = 20.0f;
  private static float yPosition = 0.0f;
  private static float zPosition = 20.0f;

  private static float velocityX = 0.0f;
  private static float velocityY = 0.0f;
  private static float velocityZ = 0.0f;
  private static float velocitySpaceship = 0.0f;

  private  static float[] forwardVector = new float[3];

  float EulerXvelocity = 0;
  float EulerYvelocity = 0;
  float EulerX = 0;
  float EulerY = 0;
  float walk = 0.0f;
  float R0 = 0.0f;
  float R1 = 0.0f;
  float R2 = 0.0f;
  float headEuler[] = new float[3];

  private static  float[] headViewx = new float[16];
  private static  float[][] actors = new float[9][3];

  private static final float inputVelocityVector[] = new float[] {0.0f,0.0f,-1.0f,0.0f};
  private static float outputVelocityVector[] = new float[4];


  private Context mActivityContext;

  int numOfCubes = 0;
  int numOfCubesInSpaceShip = 5;
  protected float[][] modelCube;
  protected float[][] modelSpaceShip;

  protected static float[] modelPosition  = new float[3];

  float[] cameraTranslat = new float[16];
  float[] cameraRotate = new float[16];
  float[] copym = new float[16];
  float[] rotateTmp = new float[16];

  private static final String TAG = "TreasureHuntActivity";

  private static final float Z_NEAR = 0.1f;
  private static final float Z_FAR = 100.0f;

  private static final float CAMERA_Z = 0.01f;
  private static final float TIME_DELTA = 0.3f;

  private static final float YAW_LIMIT = 0.12f;
  private static final float PITCH_LIMIT = 0.12f;

  private static final int COORDS_PER_VERTEX = 3;

  // We keep the light always position just above the user.
  private static final float[] LIGHT_POS_IN_WORLD_SPACE = new float[] {0.0f, 2.0f, 0.0f, 1.0f};
  private static final float[] LIGHT_POS_IN_WORLD_SPACE_ORIGINAL = new float[] {0.0f, 2.0f, 0.0f, 1.0f};

  // Convenience vector for extracting the position from a matrix via multiplication.
  private static final float[] POS_MATRIX_MULTIPLY_VEC = {0, 0, 0, 1.0f};

  private static final float MIN_MODEL_DISTANCE = 3.0f;
  private static final float MAX_MODEL_DISTANCE = 7.0f;

  private static final String OBJECT_SOUND_FILE = "cube_sound.wav";
  private static final String SUCCESS_SOUND_FILE = "success.wav";

  private final float[] lightPosInEyeSpace = new float[4];

  private FloatBuffer floorVertices;
  private FloatBuffer floorColors;
  private FloatBuffer floorNormals;
  private FloatBuffer CubeTextureCoordinateData;

  private FloatBuffer cubeVertices;
  private FloatBuffer cubeColors;
  private FloatBuffer cubeFoundColors;
  private FloatBuffer cubeNormals;

  private int cubeProgram;
  private int floorProgram;

  private int cubePositionParam;
  private int cubeNormalParam;
  private int cubeColorParam;
  //private int cubeModelParam;
  private int cubeModelViewParam;
  private int cubeModelViewProjectionParam;
  private int cubeLightPosParam;
  private int cubeTextureUniformParam;


  // --------------------------- new  --------------------------------
  /** This will be used to pass in model texture coordinate information. */
  private int CubeTextureCoordinateDataParam;
  // --------------------------- end of new  --------------------------------


  private int floorPositionParam;
  private int floorNormalParam;
  private int floorColorParam;
  private int floorModelParam;
  private int floorModelViewParam;
  private int floorModelViewProjectionParam;
  private int floorLightPosParam;

  private float[] camera;
  private float[] view;
  private float[] headView;
  private float[] modelViewProjection;
  private float[] modelView;
  private float[] modelFloor;

  private float[] tempPosition;
  private float[] headRotation;

  private float objectDistance = MAX_MODEL_DISTANCE / 2.0f;
  private float floorDepth = 20f;

  private Vibrator vibrator;
  private VrOverlayView overlayView;

  private GvrAudioEngine gvrAudioEngine;
  private volatile int sourceId = GvrAudioEngine.INVALID_ID;
  private volatile int successSourceId = GvrAudioEngine.INVALID_ID;

  /**
   * Converts a raw text file, saved as a resource, into an OpenGL ES shader.
   *
   * @param type The type of shader we will be creating.
   * @param resId The resource ID of the raw text file about to be turned into a shader.
   * @return The shader object handler.
   */
  private int loadGLShader(int type, int resId) {
    String code = readRawTextFile(resId);
    int shader = GLES20.glCreateShader(type);
    GLES20.glShaderSource(shader, code);
    GLES20.glCompileShader(shader);

    // Get the compilation status.
    final int[] compileStatus = new int[1];
    GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compileStatus, 0);

    // If the compilation failed, delete the shader.
    if (compileStatus[0] == 0) {
      Log.e(TAG, "Error compiling shader: " + GLES20.glGetShaderInfoLog(shader));
      GLES20.glDeleteShader(shader);
      shader = 0;
    }

    if (shader == 0) {
      throw new RuntimeException("Error creating shader.");
    }

    return shader;
  }

  public void logToTheScreen()
  {
    String displaymessage = String.format(
            "P(%5.2f ,%5.2f, %5.2f)\n" +    // character position
                    "HR(%5.2f ,%5.2f, %5.2f)\n" +   // character head rotation
                    "HV(%5.2f ,%5.2f, %5.2f)\n" +   // character head vector
                    "SR(%5.2f ,%5.2f, %5.2f)\n" +   // ship rotation
                    "SV(%5.2f ,%5.2f, %5.2f)\n",   // ship velocity
            xPosition, yPosition, zPosition,
            headEuler[0], headEuler[1], headEuler[2],
            velocityX, velocityY, velocityZ,
            EulerX,EulerY, 0.0f,
            outputVelocityVector[0],outputVelocityVector[1],outputVelocityVector[2]);

    overlayView.show3DToast(displaymessage);
  }

  public void logToTheScreen(String message)
  {
    String displaymessage = String.format(
            "%s\n" +                        // message
            "P(%5.2f ,%5.2f, %5.2f)\n" +    // character position
            "HR(%5.2f ,%5.2f, %5.2f)\n" +   // character head rotation
            "HV(%5.2f ,%5.2f, %5.2f)\n" +   // character head vector
            "SR(%5.2f ,%5.2f, %5.2f)\n" +   // ship rotation
            "SV(%5.2f ,%5.2f, %5.2f)\n",   // ship velocity
            message,
            xPosition, yPosition, zPosition,
            headEuler[0], headEuler[1], headEuler[2],
            velocityX, velocityY, velocityZ,
            EulerX,EulerY, 0.0f,
            outputVelocityVector[0],outputVelocityVector[1],outputVelocityVector[2]);

    overlayView.show3DToast(displaymessage);
  }

  /**
   * Checks if we've had an error inside of OpenGL ES, and if so what that error is.
   *
   * @param label Label to report in case of error.
   */
  private static void checkGLError(String label) {
    int error;
    while ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {
      Log.e(TAG, label + ": glError " + error);
      throw new RuntimeException(label + ": glError " + error);
    }
  }

  /**
   * Sets the view to our GvrView and initializes the transformation matrices we will use
   * to render our scene.
   */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    mActivityContext = getApplicationContext();



    getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

    initializeGvrView();

    //modelCube = new float[numOfCubes][16];
    modelSpaceShip = new float[numOfCubesInSpaceShip][16];
    camera = new float[16];
    view = new float[16];
    modelViewProjection = new float[16];
    modelView = new float[16];
    modelFloor = new float[16];
    tempPosition = new float[4];
    // Model first appears directly in front of user.
    modelPosition[0] = 0.0f;
    modelPosition[1] = 0.0f;
    modelPosition[2] =  -MAX_MODEL_DISTANCE / 2.0f;
    headRotation = new float[4];
    headView = new float[16];
    vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);

    overlayView = (VrOverlayView) findViewById(R.id.overlay);
    overlayView.show3DToast("Pull the magnet when you find an object.");

    // Initialize 3D audio engine.
    gvrAudioEngine = new GvrAudioEngine(this, GvrAudioEngine.RenderingMode.BINAURAL_HIGH_QUALITY);
  }

  public void initializeGvrView() {
    setContentView(R.layout.common_ui);

    GvrView gvrView = (GvrView) findViewById(R.id.gvr_view);
    gvrView.setEGLConfigChooser(8, 8, 8, 8, 16, 8);

    gvrView.setRenderer(this);
    gvrView.setTransitionViewEnabled(false);

    // Enable Cardboard-trigger feedback with Daydream headsets. This is a simple way of supporting
    // Daydream controller input for basic interactions using the existing Cardboard trigger API.
    gvrView.enableCardboardTriggerEmulation();

    if (gvrView.setAsyncReprojectionEnabled(true)) {
      // Async reprojection decouples the app framerate from the display framerate,
      // allowing immersive interaction even at the throttled clockrates set by
      // sustained performance mode.
      AndroidCompat.setSustainedPerformanceMode(this, true);
    }

    setGvrView(gvrView);
  }

  @Override
  public void onPause() {
    gvrAudioEngine.pause();
    super.onPause();
  }

  @Override
  public void onStop() {
    super.onStop();
  }

  @Override
  public void onDestroy() {
    super.onDestroy();
  }

  @Override
  public void onResume() {
    super.onResume();
    gvrAudioEngine.resume();
  }

  @Override
  public void onRendererShutdown() {
    Log.i(TAG, "onRendererShutdown");
  }

  protected String getGridShader()
  {
    return RawResourceReader.readTextFileFromRawResource(mActivityContext, R.raw.grid_fragment);
  }

  protected String getVertexShader()
  {
    return RawResourceReader.readTextFileFromRawResource(mActivityContext, R.raw.per_pixel_vertex_shader);
  }

  protected String getPassThroughFragmentShader()
  {
    return RawResourceReader.readTextFileFromRawResource(mActivityContext, R.raw.passthrough_fragment);
  }


  protected String getFragmentShader()
  {
    return RawResourceReader.readTextFileFromRawResource(mActivityContext, R.raw.per_pixel_fragment_shader);
  }

  protected String getLightVertexShader()
  {
    return RawResourceReader.readTextFileFromRawResource(mActivityContext, R.raw.light_vertex);
  }


  @Override
  public void onSurfaceChanged(int width, int height) {
    Log.i(TAG, "onSurfaceChanged");
  }

  /**
   * Creates the buffers we use to store information about the 3D world.
   *
   * <p>OpenGL doesn't use Java arrays, but rather needs data in a format it can understand.
   * Hence we use ByteBuffers.
   *
   * @param config The EGL configuration used when creating the surface.
   */
  @Override
  public void onSurfaceCreated(EGLConfig config) {
    Log.i(TAG, "onSurfaceCreated");
    GLES20.glClearColor(0.1f, 0.1f, 0.1f, 0.5f); // Dark background so text shows up well.

    // Use culling to remove back faces.
    GLES20.glEnable(GLES20.GL_CULL_FACE);

    // Enable depth testing
    GLES20.glEnable(GLES20.GL_DEPTH_TEST);

    ByteBuffer bbVertices = ByteBuffer.allocateDirect(WorldLayoutData.CUBE_COORDS.length * 4);
    bbVertices.order(ByteOrder.nativeOrder());
    cubeVertices = bbVertices.asFloatBuffer();
    cubeVertices.put(WorldLayoutData.CUBE_COORDS);
    cubeVertices.position(0);

    ByteBuffer bbColors = ByteBuffer.allocateDirect(WorldLayoutData.CUBE_COLORS.length * 4);
    bbColors.order(ByteOrder.nativeOrder());
    cubeColors = bbColors.asFloatBuffer();
    cubeColors.put(WorldLayoutData.CUBE_COLORS);
    cubeColors.position(0);

    ByteBuffer bbFoundColors =
        ByteBuffer.allocateDirect(WorldLayoutData.CUBE_FOUND_COLORS.length * 4);
    bbFoundColors.order(ByteOrder.nativeOrder());
    cubeFoundColors = bbFoundColors.asFloatBuffer();
    cubeFoundColors.put(WorldLayoutData.CUBE_FOUND_COLORS);
    cubeFoundColors.position(0);

    ByteBuffer bbNormals = ByteBuffer.allocateDirect(WorldLayoutData.CUBE_NORMALS.length * 4);
    bbNormals.order(ByteOrder.nativeOrder());
    cubeNormals = bbNormals.asFloatBuffer();
    cubeNormals.put(WorldLayoutData.CUBE_NORMALS);
    cubeNormals.position(0);

    // make a floor
    ByteBuffer bbFloorVertices = ByteBuffer.allocateDirect(WorldLayoutData.FLOOR_COORDS.length * 4);
    bbFloorVertices.order(ByteOrder.nativeOrder());
    floorVertices = bbFloorVertices.asFloatBuffer();
    floorVertices.put(WorldLayoutData.FLOOR_COORDS);
    floorVertices.position(0);

    ByteBuffer bbFloorNormals = ByteBuffer.allocateDirect(WorldLayoutData.FLOOR_NORMALS.length * 4);
    bbFloorNormals.order(ByteOrder.nativeOrder());
    floorNormals = bbFloorNormals.asFloatBuffer();
    floorNormals.put(WorldLayoutData.FLOOR_NORMALS);
    floorNormals.position(0);

    ByteBuffer bbFloorColors = ByteBuffer.allocateDirect(WorldLayoutData.FLOOR_COLORS.length * 4);
    bbFloorColors.order(ByteOrder.nativeOrder());
    floorColors = bbFloorColors.asFloatBuffer();
    floorColors.put(WorldLayoutData.FLOOR_COLORS);
    floorColors.position(0);

    ByteBuffer bbCubeTextureCoordinateData = ByteBuffer.allocateDirect(WorldLayoutData.cubeTextureCoordinateData.length * 4);
    bbCubeTextureCoordinateData.order(ByteOrder.nativeOrder());
    CubeTextureCoordinateData = bbCubeTextureCoordinateData.asFloatBuffer();
    CubeTextureCoordinateData.put(WorldLayoutData.cubeTextureCoordinateData);
    CubeTextureCoordinateData.position(0);

    // Define a simple shader program for our point.
    final String vertexShaderStr = getVertexShader();
    final String fragmentShader = getFragmentShader();
    final String gridShader = getGridShader();
    final String lightVertexShader = getLightVertexShader();
    //final String passThroughFragmentShader = getPassThroughFragmentShader();

    final int vertexShaderHandle = ShaderHelper.compileShader(GLES20.GL_VERTEX_SHADER, vertexShaderStr);
    final int fragmentShaderHandle = ShaderHelper.compileShader(GLES20.GL_FRAGMENT_SHADER, fragmentShader);
    final int gridShaderHandle = ShaderHelper.compileShader(GLES20.GL_FRAGMENT_SHADER, gridShader);
    final int lightVertexShaderHandle = ShaderHelper.compileShader(GLES20.GL_VERTEX_SHADER, lightVertexShader);

    cubeProgram = ShaderHelper.createAndLinkProgram(vertexShaderHandle, fragmentShaderHandle,
            new String[] {"a_Position",  "a_Color", "a_Normal", "a_TexCoordinate"});


    GLES20.glUseProgram(cubeProgram);
    checkGLError("Cube program");

    // Load the texture
    mTextureDataHandleR = TextureHelper.loadTexture(mActivityContext, R.drawable.bumpy_bricks_public_domain_r);
    mTextureDataHandleL = TextureHelper.loadTexture(mActivityContext, R.drawable.bumpy_bricks_public_domain_l);


    cubePositionParam = GLES20.glGetAttribLocation(cubeProgram, "a_Position");
    cubeColorParam = GLES20.glGetAttribLocation(cubeProgram, "a_Color");
    cubeNormalParam = GLES20.glGetAttribLocation(cubeProgram, "a_Normal");
    CubeTextureCoordinateDataParam = GLES20.glGetAttribLocation(cubeProgram, "a_TexCoordinate");
    // Stewart

    //cubeModelParam = GLES20.glGetUniformLocation(cubeProgram, "u_Model");
    cubeModelViewProjectionParam = GLES20.glGetUniformLocation(cubeProgram, "u_MVPMatrix");
    cubeModelViewParam = GLES20.glGetUniformLocation(cubeProgram, "u_MVMatrix");
    //cubeModelViewParam = GLES20.glGetUniformLocation(cubeProgram, "u_MVMatrix");
    cubeLightPosParam = GLES20.glGetUniformLocation(cubeProgram, "u_LightPos");
    cubeTextureUniformParam = GLES20.glGetUniformLocation(cubeProgram, "u_Texture");

    checkGLError("Cube program params");


    floorProgram = ShaderHelper.createAndLinkProgram(lightVertexShaderHandle, gridShaderHandle,
            new String[] {"a_Position",  "a_Color", "a_Normal"});

    GLES20.glUseProgram(floorProgram);

    checkGLError("Floor program");

    floorModelParam = GLES20.glGetUniformLocation(floorProgram, "u_Model");
    floorModelViewParam = GLES20.glGetUniformLocation(floorProgram, "u_MVMatrix");
    floorModelViewProjectionParam = GLES20.glGetUniformLocation(floorProgram, "u_MVPMatrix");
    floorLightPosParam = GLES20.glGetUniformLocation(floorProgram, "u_LightPos");

    floorPositionParam = GLES20.glGetAttribLocation(floorProgram, "a_Position");
    floorNormalParam = GLES20.glGetAttribLocation(floorProgram, "a_Normal");
    floorColorParam = GLES20.glGetAttribLocation(floorProgram, "a_Color");

    checkGLError("Floor program params");

    Matrix.setIdentityM(modelFloor, 0);
    Matrix.translateM(modelFloor, 0, 0, -floorDepth, 0); // Floor appears below user.

    // Avoid any delays during start-up due to decoding of sound files.
    new Thread(
            new Runnable() {
              @Override
              public void run() {
                // Start spatial audio playback of OBJECT_SOUND_FILE at the model position. The
                // returned sourceId handle is stored and allows for repositioning the sound object
                // whenever the cube position changes.
                gvrAudioEngine.preloadSoundFile(OBJECT_SOUND_FILE);
                sourceId = gvrAudioEngine.createSoundObject(OBJECT_SOUND_FILE);
                gvrAudioEngine.setSoundObjectPosition(
                    sourceId, modelPosition[0], modelPosition[1], modelPosition[2]);
                gvrAudioEngine.playSound(sourceId, true /* looped playback */);
                // Preload an unspatialized sound to be played on a successful trigger on the cube.
                gvrAudioEngine.preloadSoundFile(SUCCESS_SOUND_FILE);
              }
            })
        .start();

    updateModelPosition();

    checkGLError("onSurfaceCreated");
  }



  void setCubeLoation(float[] location, float x, float y, float z)
  {
    Matrix.setIdentityM(location, 0);
    Matrix.translateM(location, 0, x, y, z);
  }
  /**
   * Updates the cube model position.
   */
  protected void updateModelPosition() {

    float dist = 3.0f;
    float shrink = 0.25f;
    numOfCubes = 0;

    try
    {
      Circuit circuit = new Circuit();

      modelCube = circuit.GetTransforms(9);

      setCubeLoation(modelCube[0], 0.0f, 0.0f, 0.0f);  //Center
      setCubeLoation(modelCube[1], dist, 0.0f, 0.0f );  // X axis
      setCubeLoation(modelCube[2], 6 * dist, 0.0f, 0.0f );  // X axis
      setCubeLoation(modelCube[3], 0.0f, dist, 0.0f );  // Y axis
      setCubeLoation(modelCube[4], 0.0f, 2 * dist, 0.0f );  // Y axis
      setCubeLoation(modelCube[5], 0.0f, 0.0f, dist ); // Z axis
      setCubeLoation(modelCube[6], 0.0f, 0.0f, 2 * dist );
      setCubeLoation(modelCube[7], 0.0f, 0.0f, 3 * dist );
      setCubeLoation(modelCube[8], 0.0f, 0.0f, 4 * dist );

      numOfCubes = 9 + circuit.GetNumberOfBricks();

/*
      setCubeLoation(modelCube[9], 0.0f, dist, 0.0f);
      setCubeLoation(modelCube[10], 0.0f, 2 * dist, 0.0f);
      setCubeLoation(modelCube[11], 0.0f, 0.0f, 0.0f);
      setCubeLoation(modelCube[12], 0.0f, -dist, 0.0f);
      setCubeLoation(modelCube[13], 0.0f, -2 * dist, 0.0f);

      setCubeLoation(modelCube[14], 0.0f, dist, dist);
      setCubeLoation(modelCube[15], 0.0f, 2 * dist, dist);
      setCubeLoation(modelCube[16], 0.0f, 0.0f, dist);
      setCubeLoation(modelCube[17], 0.0f, -dist, dist);
      setCubeLoation(modelCube[18], 0.0f, -2 * dist, dist);

      setCubeLoation(modelCube[19], 0.0f, dist, 2 * dist);
      setCubeLoation(modelCube[20], 0.0f, 2 * dist, 2 * dist);
      setCubeLoation(modelCube[21], 0.0f, 0.0f, 2 * dist);
      setCubeLoation(modelCube[22], 0.0f, -dist, 2 * dist);
      setCubeLoation(modelCube[23], 0.0f, -2 * dist, 2 * dist);

      setCubeLoation(modelCube[24], 0.0f, dist, -dist);
      setCubeLoation(modelCube[25], 0.0f, 2 * dist, -dist);
      setCubeLoation(modelCube[26], 0.0f, 0.0f, -dist);
      setCubeLoation(modelCube[27], 0.0f, -dist, -dist);
      setCubeLoation(modelCube[28], 0.0f, -2 * dist, -dist);

      setCubeLoation(modelCube[29], 0.0f, dist, -2 * dist);
      setCubeLoation(modelCube[30], 0.0f, 2 * dist, -2 * dist);
      setCubeLoation(modelCube[31], 0.0f, 0.0f, -2 * dist);
      setCubeLoation(modelCube[32], 0.0f, -dist, -2 * dist);
      setCubeLoation(modelCube[33], 0.0f, -2 * dist, -2 * dist);
      for (int i = 9; i < 34; i++)
      {
        Matrix.rotateM(modelCube[i], 0, 90, 0, 1, 0);
        Matrix.translateM(modelCube[i], 0, 30, 0, 30);
      }
*/

      setCubeLoation(modelSpaceShip[0], 0.0f, -dist, -dist ); // Z axis
      setCubeLoation(modelSpaceShip[1], 0.0f, -dist, -2 * dist ); // Z axis
      setCubeLoation(modelSpaceShip[2], 0.0f, -dist, dist ); // Z axis
      setCubeLoation(modelSpaceShip[3], 0.0f, -dist, 2 * dist ); // Z axis
      setCubeLoation(modelSpaceShip[4], 0.0f, -dist, 3 * dist ); // Z axis
      Matrix.scaleM(modelSpaceShip[0], 0, shrink, shrink, shrink);
      Matrix.scaleM(modelSpaceShip[1], 0, shrink, shrink, shrink);
      Matrix.scaleM(modelSpaceShip[2], 0, shrink, shrink, shrink);
      Matrix.scaleM(modelSpaceShip[3], 0, shrink, shrink, shrink);
      Matrix.scaleM(modelSpaceShip[4], 0, shrink, shrink, shrink);


      // Update the sound location to match it with the new cube position.
      if (sourceId != GvrAudioEngine.INVALID_ID) {
        gvrAudioEngine.setSoundObjectPosition(
                sourceId, modelPosition[0], modelPosition[1], modelPosition[2]);
      }
      checkGLError("updateCubePosition");

    }
    catch(Exception ex)
    {
      ex.printStackTrace();

    }


  }

  /**
   * Converts a raw text file into a string.
   *
   * @param resId The resource ID of the raw text file about to be turned into a shader.
   * @return The context of the text file, or null in case of error.
   */
  private String readRawTextFile(int resId) {
    InputStream inputStream = getResources().openRawResource(resId);
    try {
      BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
      StringBuilder sb = new StringBuilder();
      String line;
      while ((line = reader.readLine()) != null) {
        sb.append(line).append("\n");
      }
      reader.close();
      return sb.toString();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  @Override
  public boolean dispatchGenericMotionEvent(MotionEvent event) {


    // Check that the event came from a joystick or gamepad since a generic
    // motion event could be almost anything. API level 18 adds the useful
    // event.isFromSource() helper function.
    boolean rt = false;
    int eventSource = event.getSource();
    if (  ((eventSource & InputDevice.SOURCE_GAMEPAD) == InputDevice.SOURCE_GAMEPAD) ||
          ((eventSource & InputDevice.SOURCE_JOYSTICK) == InputDevice.SOURCE_JOYSTICK) )
    {
      if (event.getAction() == android.view.MotionEvent.ACTION_MOVE  )
      {
        int id = event.getDeviceId();
        if (-1 != id) {

          float X = event.getX();

          float Y = event.getY();

          if (X == 0 && Y == 1) {
            // yaw right
            EulerYvelocity = EulerYvelocity +1;
            logToTheScreen("yaw right");
            rt = true;

          } else if (X == 0 && Y == -1) {
            // yaw left
            EulerYvelocity = EulerYvelocity -1;
            logToTheScreen("yaw left");

            rt = true;
          } else if (X == 1 && Y == 0) {
            // pitch up
            EulerXvelocity = EulerXvelocity -1;
            logToTheScreen("pitch up");

            rt = true;
          } else if (X == -1 && Y == 0) {
            // pitch down
            EulerXvelocity = EulerXvelocity +1;
            logToTheScreen("pitch down");

            rt = true;
          } else if (X == -1 && Y == -1) {
            // yaw and pich -1
            EulerXvelocity = EulerXvelocity +1;
            EulerYvelocity = EulerYvelocity +1;
            logToTheScreen("pitch down yaw left");

            rt = true;
          } else if (X == 1 && Y == 1) {
            // yaw and pitch +1
            EulerXvelocity = EulerXvelocity -1;
            EulerYvelocity = EulerYvelocity -1;
            logToTheScreen("pitch up yaw right");


            rt = true;
          } else {
            rt = true;
            EulerXvelocity = 0;
            EulerYvelocity = 0;

          }
        }

      }
    }
    else
    {
      overlayView.show3DToast("dispatchGenericMotionEvent()\n2\nsuper.onGenericMotionEvent(event) ");
      rt = super.onGenericMotionEvent(event);
    }

    return rt;
  }


  @Override
  public boolean dispatchKeyEvent (KeyEvent event) {
    boolean rt = false;

    /*
              Joystick buttons

           u           D
                       |
        j          B---+---A
           @           |
                       C
     */

    if ((event.getSource() & InputDevice.SOURCE_GAMEPAD) == InputDevice.SOURCE_GAMEPAD)
    {
      if (event.getRepeatCount() == 0)
      {

        if (event.getAction() == KeyEvent.ACTION_UP && event.getKeyCode() == KeyEvent.KEYCODE_BUTTON_B) {
          // *****  Buttot "A" on joystick
          //walk = walk - 5.0f;
          updateModelPosition();
          logToTheScreen("Create Wall");
          rt = true;
        } else if (event.getAction() == KeyEvent.ACTION_UP && event.getKeyCode() == KeyEvent.KEYCODE_BUTTON_X) {
          // *****  Buttot "B" on joystick
//          logToTheScreen("B-B Nothing");
          //R0 = R0 +5;
          //updateModelPosition(walk, R0, R1, R2);
          //logToTheScreen("R0");
          rt = true;
        } else if (event.getAction() == KeyEvent.ACTION_UP && event.getKeyCode() == KeyEvent.KEYCODE_BUTTON_Y) {
          // *****  Button "D" on joystick
          velocitySpaceship++;
          logToTheScreen("B-D Faster");
          //R1 = R1 + 5;
          //updateModelPosition(walk, R0, R1, R2);
          //logToTheScreen("R1");
          rt = true;
        } else if (event.getAction() == KeyEvent.ACTION_UP && event.getKeyCode() == KeyEvent.KEYCODE_BUTTON_A) {
          // *****  Button "C" on joystick
          velocitySpaceship = 0;
          logToTheScreen("B-C Stop");
          //R2 = R2 + 5;
          //updateModelPosition(walk, R0, R1, R2);
          //logToTheScreen("R2");

          rt = true;
        } else if (event.getAction() == KeyEvent.ACTION_UP && event.getKeyCode() == KeyEvent.KEYCODE_BUTTON_R1) {
          // *****  Top Button on joystick
          logToTheScreen("B-Top Nothing");
          rt = true;
        } else if (event.getAction() == KeyEvent.ACTION_UP && event.getKeyCode() == KeyEvent.KEYCODE_BUTTON_L1) {
          // *****  Bottom Button on joystick
          // Go back to the starting position and set velocity to zero
          xPosition = 20.0f;
          yPosition = 0.0f;
          zPosition = 20.0f;
          velocitySpaceship = 0;
          //walk = R0 = R1= R2 = 0.0f;
          EulerXvelocity = EulerYvelocity = EulerY = EulerX = 0;

          logToTheScreen("B-bottom Reset");
          rt = true;
        } else {
          rt = true;
        }
      }
      else
      {
        rt = true;
      }
    }
    else
    {
      rt = super.dispatchKeyEvent(event);

    }
    return rt;
  }



  /**
   * Prepares OpenGL ES before we draw a frame.
   *
   * @param headTransform The head transformation in the new frame.
   */
  @Override
  public void onNewFrame(HeadTransform headTransform) {
    setCubeRotation();

    // Build the camera matrix and apply it to the ModelView.
    //Matrix.setLookAtM(camera, 0, 0.0f, 0.0f, CAMERA_Z, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);

    Matrix.setLookAtM(camera, 0, 0.0f, 0.0f, 0.0f,
            0.0f, 0.0f, CAMERA_Z,
            0.0f, 1.0f, 0.0f);


    Matrix.setIdentityM(copym, 0);
    Matrix.setRotateEulerM(copym, 0, 90, 0, 0);

    Matrix.setIdentityM(copym, 0);
    Matrix.setRotateEulerM(copym, 0, 0, 90, 0);

    Matrix.setIdentityM(copym, 0);
    Matrix.setRotateEulerM(copym, 0, 0, 0, 90);


    EulerY = EulerY + EulerYvelocity;
    EulerX = EulerX + EulerXvelocity;

    headTransform.getForwardVector(forwardVector, 0);
    headTransform.getEulerAngles(headEuler,0);

    Matrix.setIdentityM(headViewx, 0);
    headTransform.getHeadView(headViewx, 0);
    forwardVector[1] = -headViewx[6];
    forwardVector[0] =  headViewx[2];

    velocityX = forwardVector[0];
    velocityY = -forwardVector[1];
    velocityZ = -forwardVector[2];

    headTransform.getHeadView(headView, 0);

    Matrix.setIdentityM(rotateTmp, 0);
    Matrix.rotateM(rotateTmp,0,-EulerY, 0.0f, 1.0f, 0.0f);
    Matrix.rotateM(rotateTmp,0,-EulerX, 1.0f, 0.0f, 0.0f);
    Matrix.multiplyMV(outputVelocityVector, 0, rotateTmp, 0, inputVelocityVector, 0);

    if (velocitySpaceship > 0)
    {

      //xPosition = xPosition + velocitySpaceship * (velocityX/100.0f);
      //yPosition = yPosition + velocitySpaceship * (velocityY/100.0f);
      //zPosition = zPosition + velocitySpaceship * (velocityZ/100.0f);

      xPosition = xPosition + (outputVelocityVector[0] * velocitySpaceship /100.0f);
      yPosition = yPosition + (outputVelocityVector[1] * velocitySpaceship /100.0f);
      zPosition = zPosition + (outputVelocityVector[2] * velocitySpaceship /100.0f);
    }

    LIGHT_POS_IN_WORLD_SPACE[0] = xPosition + LIGHT_POS_IN_WORLD_SPACE_ORIGINAL[0];
    LIGHT_POS_IN_WORLD_SPACE[1] = yPosition + LIGHT_POS_IN_WORLD_SPACE_ORIGINAL[1];
    LIGHT_POS_IN_WORLD_SPACE[2] = yPosition + LIGHT_POS_IN_WORLD_SPACE_ORIGINAL[2];

    // Update the 3d audio engine with the most recent head rotation.
    headTransform.getQuaternion(headRotation, 0);
    gvrAudioEngine.setHeadRotation(
        headRotation[0], headRotation[1], headRotation[2], headRotation[3]);
    // Regular update call to GVR audio engine.
    gvrAudioEngine.update();

    checkGLError("onReadyToDraw");
  }

  protected void setCubeRotation() {

    for (int i=0; i<numOfCubes; i++)
    {
      Matrix.rotateM(modelCube[i], 0, TIME_DELTA, 0.5f, 0.5f, 1.0f);

    }
  }

  /**
   * Draws a frame for an eye.
   *
   * @param eye The eye to render. Includes all required transformations.
   */
  @Override
  public void onDrawEye(Eye eye) {
    GLES20.glEnable(GLES20.GL_DEPTH_TEST);
    GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);

    checkGLError("colorParam");

    /*  Draw spaceship **************************************************/
    // Apply the eye transformation to the camera.
    Matrix.multiplyMM(view, 0, eye.getEyeView(), 0, camera, 0);

    // Set the position of the light
    Matrix.multiplyMV(lightPosInEyeSpace, 0, view, 0, LIGHT_POS_IN_WORLD_SPACE, 0);

    float[] perspective = eye.getPerspective(Z_NEAR, Z_FAR);
    for (int i=0; i<numOfCubesInSpaceShip; i++)
    {
      Matrix.multiplyMM(modelView, 0, view, 0, modelSpaceShip[i], 0);
      Matrix.multiplyMM(modelViewProjection, 0, perspective, 0, modelView, 0);
      drawCube(eye.getType() == Eye.Type.LEFT);
    }


    /*  end Draw spaceship ***********************************************/

    Matrix.setIdentityM(cameraTranslat, 0);
    Matrix.translateM(cameraTranslat, 0, xPosition, yPosition, zPosition);

    Matrix.setIdentityM(copym, 0);
    Matrix.setIdentityM(rotateTmp, 0);


    Matrix.rotateM(copym, 0, eye.getEyeView(), 0, EulerX, 1, 0, 0);
    Matrix.rotateM(rotateTmp, 0, copym, 0, EulerY, 0, 1, 0);

    Matrix.setIdentityM(copym, 0);


    // Apply the eye transformation to the camera.
    Matrix.multiplyMM(copym, 0, cameraTranslat, 0, camera, 0);
    //Matrix.multiplyMM(view, 0, eye.getEyeView(), 0, copym, 0);
    Matrix.multiplyMM(view, 0, rotateTmp, 0, copym, 0);

    Matrix.setIdentityM(copym, 0);
    //Matrix.multiplyMM(view, 0, eye.getEyeView(), 0, camera, 0);

    // Set the position of the light
    Matrix.multiplyMV(lightPosInEyeSpace, 0, view, 0, LIGHT_POS_IN_WORLD_SPACE, 0);



    // Build the ModelView and ModelViewProjection matrices
    // for calculating cube position and light.
    perspective = eye.getPerspective(Z_NEAR, Z_FAR);
    for (int i=0; i<numOfCubes; i++)
    {
      Matrix.multiplyMM(modelView, 0, view, 0, modelCube[i], 0);
      Matrix.multiplyMM(modelViewProjection, 0, perspective, 0, modelView, 0);
      drawCube(eye.getType() == Eye.Type.LEFT);

    }

    // Set modelView for the floor, so we draw floor in the correct location
    Matrix.multiplyMM(modelView, 0, view, 0, modelFloor, 0);
    Matrix.multiplyMM(modelViewProjection, 0, perspective, 0, modelView, 0);
    drawFloor();

  }


  @Override
  public void onFinishFrame(Viewport viewport) {}

  /**
   * Draw the cube.
   *
   * <p>We've set all of our transformation matrices. Now we simply pass them into the shader.
   */
  public void drawCube(boolean leftEye ) {
    GLES20.glUseProgram(cubeProgram);

    // Set the active texture unit to texture unit 0.
    GLES20.glActiveTexture(GLES20.GL_TEXTURE0);

    // Bind the texture to this unit.
    if (leftEye)
      GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mTextureDataHandleL);
    else
      GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mTextureDataHandleR);

    GLES20.glUniform1i(cubeTextureUniformParam, 0);


    GLES20.glUniform3fv(cubeLightPosParam, 1, lightPosInEyeSpace, 0);

    // Set the Model in the shader, used to calculate lighting
    //GLES20.glUniformMatrix4fv(cubeModelParam, 1, false, modelCube, 0);

    // Set the ModelView in the shader, used to calculate lighting
    GLES20.glUniformMatrix4fv(cubeModelViewParam, 1, false, modelView, 0);

    // Set the position of the cube
    GLES20.glVertexAttribPointer(cubePositionParam, COORDS_PER_VERTEX, GLES20.GL_FLOAT, false, 0, cubeVertices);

    // Set the ModelViewProjection matrix in the shader.
    GLES20.glUniformMatrix4fv(cubeModelViewProjectionParam, 1, false, modelViewProjection, 0);

    // Set the normal positions of the cube, again for shading
    GLES20.glVertexAttribPointer(cubeNormalParam, 3, GLES20.GL_FLOAT, false, 0, cubeNormals);
    GLES20.glVertexAttribPointer(cubeColorParam, 4, GLES20.GL_FLOAT, false, 0, cubeColors);

    // Pass in the texture coordinate information
    // Stewart
    CubeTextureCoordinateData.position(0);
    GLES20.glVertexAttribPointer(CubeTextureCoordinateDataParam, 2, GLES20.GL_FLOAT, false, 0, CubeTextureCoordinateData);


    // Enable vertex arrays
    GLES20.glEnableVertexAttribArray(cubePositionParam);
    GLES20.glEnableVertexAttribArray(cubeNormalParam);
    GLES20.glEnableVertexAttribArray(cubeColorParam);
    GLES20.glEnableVertexAttribArray(CubeTextureCoordinateDataParam);

    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, 36);

    // Disable vertex arrays
    GLES20.glDisableVertexAttribArray(cubePositionParam);
    GLES20.glDisableVertexAttribArray(cubeNormalParam);
    GLES20.glDisableVertexAttribArray(cubeColorParam);
    GLES20.glDisableVertexAttribArray(CubeTextureCoordinateDataParam);

    checkGLError("Drawing cube");
  }



  /**
   * Draw the floor.
   *
   * <p>This feeds in data for the floor into the shader. Note that this doesn't feed in data about
   * position of the light, so if we rewrite our code to draw the floor first, the lighting might
   * look strange.
   */
  public void drawFloor() {
    GLES20.glUseProgram(floorProgram);

    // Set ModelView, MVP, position, normals, and color.
    GLES20.glUniform3fv(floorLightPosParam, 1, lightPosInEyeSpace, 0);
    GLES20.glUniformMatrix4fv(floorModelParam, 1, false, modelFloor, 0);
    GLES20.glUniformMatrix4fv(floorModelViewParam, 1, false, modelView, 0);
    GLES20.glUniformMatrix4fv(floorModelViewProjectionParam, 1, false, modelViewProjection, 0);
    GLES20.glVertexAttribPointer(floorPositionParam, COORDS_PER_VERTEX, GLES20.GL_FLOAT, false, 0, floorVertices);
    GLES20.glVertexAttribPointer(floorNormalParam, 3, GLES20.GL_FLOAT, false, 0, floorNormals);
    GLES20.glVertexAttribPointer(floorColorParam, 4, GLES20.GL_FLOAT, false, 0, floorColors);

    GLES20.glEnableVertexAttribArray(floorPositionParam);
    GLES20.glEnableVertexAttribArray(floorNormalParam);
    GLES20.glEnableVertexAttribArray(floorColorParam);

    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, 24);

    GLES20.glDisableVertexAttribArray(floorPositionParam);
    GLES20.glDisableVertexAttribArray(floorNormalParam);
    GLES20.glDisableVertexAttribArray(floorColorParam);

    checkGLError("drawing floor");
  }

  /**
   * Called when the Cardboard trigger is pulled.
   */
  @Override
  public void onCardboardTrigger() {
    Log.i(TAG, "onCardboardTrigger");

    // Always give user feedback.
    vibrator.vibrate(50);
  }

  /**
   * Find a new random position for the object.
   *
   * <p>We'll rotate it around the Y-axis so it's out of sight, and then up or down by a little bit.
   */
  /*
  protected void hideObject() {
    float[] rotationMatrix = new float[16];
    float[] posVec = new float[4];

    // First rotate in XZ plane, between 90 and 270 deg away, and scale so that we vary
    // the object's distance from the user.
    float angleXZ = (float) Math.random() * 180 + 90;
    Matrix.setRotateM(rotationMatrix, 0, angleXZ, 0f, 1f, 0f);
    float oldObjectDistance = objectDistance;
    objectDistance =
        (float) Math.random() * (MAX_MODEL_DISTANCE - MIN_MODEL_DISTANCE) + MIN_MODEL_DISTANCE;
    float objectScalingFactor = objectDistance / oldObjectDistance;
    Matrix.scaleM(rotationMatrix, 0, objectScalingFactor, objectScalingFactor, objectScalingFactor);
    Matrix.multiplyMV(posVec, 0, rotationMatrix, 0, modelCube, 12);

    float angleY = (float) Math.random() * 80 - 40; // Angle in Y plane, between -40 and 40.
    angleY = (float) Math.toRadians(angleY);
    float newY = (float) Math.tan(angleY) * objectDistance;

    modelPosition[0] = posVec[0];
    modelPosition[1] = newY;
    modelPosition[2] = posVec[2];

    updateModelPosition();
  }
*/
  /**
   * Check if user is looking at object by calculating where the object is in eye-space.
   *
   * @return true if the user is looking at the object.
   */
  /*
  private boolean isLookingAtObject() {
    // Convert object space to camera space. Use the headView from onNewFrame.
    Matrix.multiplyMM(modelView, 0, headView, 0, modelCube, 0);
    Matrix.multiplyMV(tempPosition, 0, modelView, 0, POS_MATRIX_MULTIPLY_VEC, 0);

    float pitch = (float) Math.atan2(tempPosition[1], -tempPosition[2]);
    float yaw = (float) Math.atan2(tempPosition[0], -tempPosition[2]);

    return Math.abs(pitch) < PITCH_LIMIT && Math.abs(yaw) < YAW_LIMIT;
  }
  */
}
